download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile="./coursera/Exploratory Data Analysis/data",method="auto")
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile="./coursera/Exploratory Data Analysis",method="auto")
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile="./coursera/Exploratory Data Analysis",method="auto")
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile=""./coursera/Exploratory Data Analysis/data",method="auto")
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile="./coursera/Exploratory Data Analysis/data",method="auto")
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile="./coursera/Exploratory Data Analysis/data",method="auto")
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile="./coursera/Exploratory Data Analysis",method="auto")
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile="./coursera/Exploratory Data Analysis",method="auto")
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile="./",method="auto")
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile="./",method="auto")
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile="C:\\Users\\elton.defreitas\\Documents\\coursera\\Exploratory Data Analysis\\data",method="auto")
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile="C:\\Users\\elton.defreitas\\Documents\\coursera\\Exploratory Data Analysis\\data",method="auto")
download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile="C:\\Users\\elton.defreitas\\Documents\\",method="auto")
download.file("http://d396qusza40orc.cloudfront.net/exdata%2Fdata%2FNEI_data.zip",destfile="C:\\Users\\elton.defreitas\\Documents\\",method="auto")
library(swirl)
rm(list=ls())
library(swirl)
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dlpyr)
library(dplyr)
package_version(dplyr)
package_version("dplyr)
""
"")
package_version("dplyr")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
cran
?select
select(cran,ip_id,paackage,country)
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran,-time)
select(cran,-time) | (x:-5:20)
select(cran,-time) | (X:-5:20)
select(cran,x:-5:20)
select(cran,X:-5:20)
select(cran,X:size)
-5:20
(5:20)
-(5:20)
select(cran,x:size)
select(cran,X:size)
select(cran,-(x:size))
select(cran,-(X:size))
filter(cran,package == swirl"")
filter(cran,package == "swirl")
filter(cran,r_version =="3.1.1",country =="us")
filter(cran,r_version =="3.1.1",country =="US")
?Comparison
filter(cran,country in (India),cran$r_version)
filter(cran,country in (India),r_version <= "3.0.2")
filter(cran,country == "India",r_version <= "3.0.2")
filter(cran,country == "IN",r_version <= "3.0.2")
filter(cran,country =="US" | country == "IN")
filter(cran,cran$size > 100500 & cran$r_os == "linux-gnu")
filter(cran,size > 100500 & r_os == "linux-gnu")
filter(cran,size > 100500,r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,r_version !is.na())
filter(cran, !is.na(r_version))
cra2 <- select(cran,size,ip_id)
cran2 <- select(cran,size,ip_id)
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(cran2$ip_id))
arrange(cran2,desc(ip_id))
arrange(cran2,package,ip_id)
arrange(cran2,asc(country),desc(r_version),asc(ip_id))
arrange(cran2,country,desc(r_version),ip_id)
cran3 <- select(cran,ip_id,package,size)
cran3
mutate(cran3,size_mb = size / 2^20)
mutate(cran3)
mutate(cran3,size_gb = size_mb / 2^10)
mutate(cran3,size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3)
mutate(cran3,correct_size = size + 1000)
summarise(cran,avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(swirl)
install_from_swirl("Exploratory Data Analysis")
rm(list = ls())
library(swirl)
install_from_swirl("Exploratory Data Analysis")
library(kernlab)
data(spam)
install.packages("kernlab")
library(kernlab)
data(spam)
str(spam[, 1:5])
spam
head(spam,n=10)
view(spam)
View(spam)
str(spam[, 1:5])
?str()
str(spam[1, 1:5])
str(spam[2, 1:5])
str(spam[2, 1:15])
str(spam[1, 1:15])
str(spam[, 1:15])
set.seed(3435)
trainIndicator = rbinom(4601, size = 1, prob = 0.5)
table(trainIndicator)
?rbinom()
?table()
trainIndicator
trainIndicator
trainIndicator
table(trainIndicator)
trainSpam = spam[trainIndicator == 1, ]
testSpam = spam[trainIndicator == 0, ]
trainSpam
head(trainSpam,n=10)
names(trainSpam)
head(trainSpam)
names(trainSpam)
head(trainSpam,n=10)
table(trainSpam$type)
table(trainSpam$type)
plot(trainSpam$capitalAve ~ trainSpam$type)
plot(log10(trainSpam$capitalAve + 1) ~ trainSpam$type)
plot(log10(trainSpam[, 1:4] + 1))
hCluster = hclust(dist(t(trainSpam[, 1:57])))
plot(hCluster)
hClusterUpdated = hclust(dist(t(log10(trainSpam[, 1:55] + 1))))
plot(hClusterUpdated)
trainSpam$numType = as.numeric(trainSpam$type) - 1
costFunction = function(x, y) sum(x != (y > 0.5))
cvError = rep(NA, 55)
library(boot)
for (i in 1:55) {
lmFormula = reformulate(names(trainSpam)[i], response = "numType")
glmFit = glm(lmFormula, family = "binomial", data = trainSpam)
cvError[i] = cv.glm(trainSpam, glmFit, costFunction, 2)$delta[2]
}
names(trainSpam)[which.min(cvError)]
## Use the best model from the group
predictionModel = glm(numType ~ charDollar, family = "binomial", data = trainSpam)
## Get predictions on the test set
predictionTest = predict(predictionModel, testSpam)
predictedSpam = rep("nonspam", dim(testSpam)[1])
## Classify as `spam' for those with prob > 0.5
predictedSpam[predictionModel$fitted > 0.5] = "spam"
## Classification table
table(predictedSpam, testSpam$type)
## Error rate
(61 + 458)/(1346 + 458 + 61 + 449)
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
swirl()
library(swirl)
swiirl()
swirl()
5+7
x <- 5+7
x
x -3
y <- x -3
y
z <- c(1.1,9,3.14)
z
?c()
?c
z
c(z,555)
c(z,555,z)
z * 2 + 100
quit
exit
library(swirl)
swirl()
help
info()
1
100-1
(z * 2 + 100)-1
z <- c(1.1,9,3.14)
(z * 2 + 100)-1
2
34
4
5
5
5
5
56
6
6
6
6
6
info()
skip()
deck
52
4/52
0
3/13
2/51
info()
bye()
swirl()
11/12
deck
52
4
4/52
0
3/13
2/51
11/10
11/12
deck
52
4/52
0
3/13
2/51
.64
.64
mypdf
integrate(mypdf,0,1.6)
1.414214
.997*.001
(1-.985)*(1-.001)
.000997/(.000997+.014985)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
3.5
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
5+7
x <- 5 + 7
x
y <- x-3
y
z <- c(1.1, 9 , 3.14)
?c
z
c(z, 555,z)
z * 2 + 100
mySqrt <- sqrt(z-1)
mySqrt <- sqrt(z-1)
my_Sqrt <- sqrt(z-1)
my_sqrt <- sqrt(z - 1)
print(my_sqrt)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
(z * 2 + 100)
(z * 2 + 1000)
(z * 2 + 1000)
(z * 2 + 1000)
z * 2 + 1000
my_duv
my_div
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z * 2 + 100
my_sqrt <- z-1
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) c(0, 10)
c(1, 2, 3, 4),c(0, 10)
c(1, 2, 3, 4)
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1?
1
15:1
?`:`
seq(1, 20)
eq(0,
| 10, by=0.5)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40
)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_cha
my_char
paste(my_char, collapse = " ")
CorrectAnswer:
my_name <- c(my_char, "Swirl")
my_name <- c(my_char, "Swirl")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3, c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
omnitest(correctExpr='my_data == NA')
my_data == NA
sum(my_na)
my_data
0//0
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
volnames(my_data) <- cnames
colnames(my_data) <- cnames
my_data
swirl()
library(swirl)
swirl()
dice_sqr
ex2_fair <- dice_sqr * PDF
ex2_fair <- dice_sqr * dice_fair
ex2_fair <- sum(dice_sqr * dice_fair)
(3.5^2)-ex2_fair
ex2_fair-3.5^2
library(swirl)
swirl()
swirl()
5 + 7
x <- 5 + 7
x
y <- x -3
y
z<-c(1,9,3.14)
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
z
sqrt(z-1)
my_sqrt <-sqrt(z-1)
my_sqrt
quad <- c(4,9,16,25,36)
sqrt(quad)
abs(quad)
quad^2
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4),c(0, 10)
c(1, 2, 3, 4);c(0, 10)
c(1, 2, 3, 4)+c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
getwd()
ls()
x <- 9
ls
ls()
list.files()
dir()
ls()
list.files()
dir()
?ls
?list.files
args()
args(list.files())
args(list.file)
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R",""mytest3.R"")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
afdg
file.path("folder1","mytest3.R")
file.path("folder1", "folder2")
?dir.create
dir.create("testdir2")
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink()
unlink(x)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir", recursive = TRUE)
getwd()
setwd("C:\\Users\\elton.defreitas\\Documents\\GitHub\\ProgrammingAssignment2")
source("./cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$mvget()
my_matrix$mvgetmvivrs()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$mvgetmvivrs()
my_matrix$mvset(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$mvget()
my_matrix$mvgetmvivrs()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$mvgetmvivrs()
